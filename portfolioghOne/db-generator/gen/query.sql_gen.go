// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package models

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users.user (
		user_entity_id,
		user_name,
		user_email,
		user_gender
	) 
    VALUES ( $1,$2,$3,$4) RETURNING user_entity_id
`

type CreateUserParams struct {
	UserEntityID int32          `db:"user_entity_id" json:"userEntityId"`
	UserName     sql.NullString `db:"user_name" json:"userName"`
	UserEmail    sql.NullString `db:"user_email" json:"userEmail"`
	UserGender   sql.NullString `db:"user_gender" json:"userGender"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserEntityID,
		arg.UserName,
		arg.UserEmail,
		arg.UserGender,
	)
	var user_entity_id int32
	err := row.Scan(&user_entity_id)
	return user_entity_id, err
}

const deleteCategory = `-- name: DeleteCategory :exec

DELETE FROM users.user WHERE user_entity_id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, userEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, userEntityID)
	return err
}

const getUser = `-- name: GetUser :one

SELECT user_entity_id, user_name, user_email, user_gender FROM users.user WHERE user_entity_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userEntityID int32) (UsersUser, error) {
	row := q.db.QueryRowContext(ctx, getUser, userEntityID)
	var i UsersUser
	err := row.Scan(
		&i.UserEntityID,
		&i.UserName,
		&i.UserEmail,
		&i.UserGender,
	)
	return i, err
}

const listUser = `-- name: ListUser :many

SELECT user_entity_id, user_name, user_email, user_gender FROM users.user ORDER BY user_name
`

func (q *Queries) ListUser(ctx context.Context) ([]UsersUser, error) {
	rows, err := q.db.QueryContext(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUser
	for rows.Next() {
		var i UsersUser
		if err := rows.Scan(
			&i.UserEntityID,
			&i.UserName,
			&i.UserEmail,
			&i.UserGender,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
